[delayed_gcode _stay_awake_for_dryer]
# initial_duration: 1.0
gcode:
    {% set drying_active  = printer["gcode_macro DRY_FILAMENT"].active %}
    {% set count          = printer["gcode_macro DRY_FILAMENT"].count  %}
    {% set minutes        = printer["gcode_macro DRY_FILAMENT"].minutes %}
    {% set stop_dryer     = printer["gcode_macro DRY_FILAMENT"].stop_dryer %}
    {% set interval       = printer["gcode_macro DRY_FILAMENT"].interval %}
    {% set target_temp    = printer["gcode_macro DRY_FILAMENT"].target_temp %}
    {% set temp_deviation = printer["gcode_macro DRY_FILAMENT"].temp_deviation %}

    # {action_respond_info("Drying Active: %s, Stop Dryer: %s, Interval: %s, Target Temp: %s" % (drying_active, stop_dryer, interval, target_temp))}
    # RESPOND MSG='{"Drying Active: %s, Stop Dryer: %s, Count: %s, Target Temp: %s" % (drying_active, stop_dryer, count, target_temp)}'
    # RESPOND MSG='{"stop_dryer: %i" % stop_dryer|int}'
    # {% if stop_dryer or not drying_active or count*interval >= minutes*60 %}
    {% if stop_dryer or count*interval >= minutes*60 %}
        # {action_respond_info("inside the if")}
        # {% if stop_dryer and drying_active %}
        {% if drying_active %}
            {% set elapsed = count*interval/60.0|float %}
            RESPOND MSG='{"‚ùÑÔ∏è Stopping the drying after %.1f minutes! ‚ùÑÔ∏è" % elapsed}'
        {% endif %}
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=active VALUE=False
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=count VALUE=0
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=minutes VALUE=0
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=interval VALUE=5
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=stop_dryer VALUE=True
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=dryer_temp_max VALUE=100
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=dryer_temp_min VALUE=20
        TURN_OFF_HEATERS
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
        {% if drying_active %}
            UPDATE_DELAYED_GCODE ID=_stay_awake_for_dryer DURATION=1.0
            SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=stop_dryer VALUE=False
        {% endif %}
        POWER_OFF_PRINTER FORCE=1
    {% else %}
        {% set count = count + 1 %}
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=count VALUE={count}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={target_temp}

        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=active VALUE=True
        UPDATE_DELAYED_GCODE ID=_stay_awake_for_dryer DURATION={interval}

    {% endif %}

[gcode_macro DEBUG_PRINTER]
gcode:
    {% set my_obj = printer.heater_bed %}
    {% for key, value in my_obj.__dict__.items() %}
        RESPOND MSG='{"%s: %s" % (key, value)}'
    {% endfor %}

[gcode_macro DRY_FILAMENT]
description: Dry filament for DURATION minutes at TEMP degrees (stop with STOP_DRYER=1 parameter)
variable_active: False
variable_count: 0
variable_minutes: 0
variable_interval: 5 # seconds
variable_stop_dryer: False
variable_dryer_temp_max: 100
variable_dryer_temp_min: 20
variable_target_temp: 60
variable_temp_deviation: 8
gcode:
    {% set active  = printer["gcode_macro DRY_FILAMENT"].active %}
    {% set count        = printer["gcode_macro DRY_FILAMENT"].count  %}
    {% set minutes        = printer["gcode_macro DRY_FILAMENT"].minutes %}
    {% set interval = printer["gcode_macro DRY_FILAMENT"].interval %}
    {% set dryer_temp_max = printer["gcode_macro DRY_FILAMENT"].dryer_temp_max %}
    {% set dryer_temp_min = printer["gcode_macro DRY_FILAMENT"].dryer_temp_min %}

    {% set dry_for = params.DURATION|default(240)|int %}
    {% set stop_dryer = params.STOP_DRYER|default(False)|int %}
    {% set target_temp = params.TEMP|default(60)|int %}

    {% if stop_dryer %}
        # RESPOND MSG='{"=== Stopping the drying!üèÅ"}'
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=stop_dryer VALUE=True
        UPDATE_DELAYED_GCODE ID=_stay_awake_for_dryer DURATION=0.2
    {% else %}
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=active VALUE=True
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=stop_dryer VALUE=False
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=minutes VALUE={dry_for}
        SET_GCODE_VARIABLE MACRO=DRY_FILAMENT VARIABLE=target_temp VALUE={target_temp}
        RESPOND MSG='{"üî• Drying filament for %i minutes at %i degrees! üî•" % (dry_for, target_temp)}'
        # RESPOND MSG='{"üî• active %s, stop_dryer: %s, minutes: %s üî•" % (active, stop_dryer, minutes)}'
        UPDATE_DELAYED_GCODE ID=_stay_awake_for_dryer DURATION=1.0
    {% endif %}

# [temperature_sensor stock_bed_sensor]
# sensor_type: EPCOS 100K B57560G104F
# sensor_pin: PB0
# gcode_id: HB0
# min_temp: 0
# max_temp: 120

[temperature_fan Dryer_fan]
pin: expander:PA0
kick_start_time: 0.5
max_power: 1.0
min_temp: 0
max_temp: 100
hardware_pwm: false
target_temp: 20
sensor_type: Generic 3950
sensor_pin: expander:PA6
gcode_id: combined_fan
max_speed: 1.0
min_speed: 0.20
control: pid
pid_Kp: 2.0
pid_Ki: 5.0
pid_Kd: 0.5
pid_deriv_time: 2.0
# control: watermark
# max_delta: 2.0

[verify_heater heater_bed]
max_error: 120
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time: 1800
#   This controls heater verification during initial heating. Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
#hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
#heating_gain: 2
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.
#

# [temperature_sensor dryer_combined]
# min_temp: -5
# max_temp: 110
# gcode_id: combined_dryer
# sensor_type: temperature_combined
# sensor_list: temperature_sensor expander_t0,temperature_sensor stock_bed_sensor
# combination_method: min
# maximum_deviation: 999.0


# control = pid
# pid_kp = 60.199
# pid_ki = 0.726
# pid_kd = 1248.370

# [multi_pin my_multi_pin]
# pins: PA2,expander:PA0
#   A comma separated list of pins associated with this alias. This
#   parameter must be provided.

# [heater_generic my_generic_heater]
# gcode_id: HD0
# heater_pin: multi_pin:my_multi_pin
# sensor_type: NTC 100K MGB18-104F39050L32
# sensor_pin: expander:PA6
# control: pid
# pid_kp = 60.199
# pid_ki = 0.726
# pid_kd = 1248.370
# min_temp: -5
# max_temp: 120
