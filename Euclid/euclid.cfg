# Macros for Euclid probe

[gcode_macro EuclidProbe]
description: config vars for Euclid probe deploy/stow

## @TODO Replace the coordinates to suit your printer
variable_stow_a:    [200.00, 117.5, 57.00]
variable_stow_b:    [224.25, 117.5, 54.50]
variable_stow_c:    [224.25, 117.5, 46.00]
variable_stow_d:    [224.25, 117.5, 23.50]
variable_stow_e:    [185.00, 117.5, 23.00]

variable_deploy_a:  [200.00, 117.5, 32.0]
variable_deploy_b:  [224.25, 117.5, 23.5]
variable_deploy_c:  [224.25, 117.5, 46.0]
variable_deploy_d:  [200.00, 117.5, 23.5]

# variable_position_preflight: [ 189.0, 117.5, 42.0 ] # position for probe to have clear path to dock
# variable_position_damekos:   [ 224.3, 117.5, 48.0 ] # [ 211.0, 117.5, 20.5 ] # position for probe for dar maali
# variable_position_joon:      [ 224.3, 117.5, 39.0 ]
# variable_position_dock:      [ 224.3, 117.5, 29.2 ] # [ 230.2, 117.5, 20.5 ] dock position
# variable_position_tearoff:   [ 191.0, 117.5, 29.2 ] # [ 230.2, 117.5, 43] position for probe above the dock to separate probe

## @TODO if your printer has a fixed Z-Endstop that you will use define it here
## @TODO for example Voron Trident
variable_position_zstop:     [ 258.95, 117.5 ] # 259.8 zstop position
variable_position_za:        [ 258.95, 117.5, 16.00 ] # [ 259.45, 117.5, 14.00 ]
variable_position_zb:        [ 258.95, 117.5, 12.00 ] # [ 259.45, 117.5, 12.00 ]
variable_position_zc:        [ 258.95, 117.5, 9.455 ] # [ 259.45, 117.5, 9.455 ]

## exit/re-entry staging
variable_position_exit:      [   0, 40 ] # exit position

## clearance between the toolhead and bed when traveling to pick up the probe
variable_bed_clearance: 5

## probe dock height
## @TODO If the toolhead can move vertically in relation to the probe dock
## @TODO height(such as attached to the be on a moving-gantry printer like a
## @TODO Voron 2.4), set this to the Z position of the probe dock.
# variable_dock_height: 15

## move speeds in mm/min
variable_move_speeds: 6000
variable_z_speeds: 600

## internal state variables; not for configuration!
variable_batch_mode_enabled: False
variable_probe_state: None
variable_probing_pos_x: 117.5
variable_probing_pos_y: 117.5
variable_adjusted_probing_pos_x: 0.0
variable_adjusted_probing_pos_y: 0.0
variable_dock_servo_angle_clear: 15 # 9
variable_dock_servo_angle_engaged: 162 #164 # 156 # 80.0 # 168 # 176.5 #173.5


gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro EuclidProbe'] }"

[respond]
default_type: echo

[delayed_gcode prerun]
initial_duration: 1
gcode:
    QUERY_PROBE
    _hide_dock
    G4 P50
    _hide_dock
    M117 Printer online.

# Servo used to move the dock into position for stow/deploy operations
#.................................................................................................................
[servo dock]
pin: PB2 #PC6
 #initial_angle: 8
maximum_servo_angle: 180
minimum_pulse_width: 0.0004 # corresponds to   0 degree (i.e. the minimum position of the servo's shaft)
maximum_pulse_width: 0.0024 # corresponds to 180 degree (i.e. the maximum position of the servo's shaft)
#.................................................................................................................


[gcode_macro _ASSERT_HOMED]
gcode:
    {% set homedaxes=printer.toolhead.homed_axes|lower %}
    {% if homedaxes != 'xyz' %}
        {action_raise_error("You need to home all axis first!")}
    {% else %}
        M118 Printer is homed, continuing...
    {% endif %}

[gcode_macro _bring_out_dock]
description: WTF
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
    ; Bring out the dock
    # M400
    # G4 P500
    SET_SERVO SERVO=dock ANGLE={euclid_probe.dock_servo_angle_engaged}

    ; Disable servo's power
    ; wait 400 ms
    G4 P250
    # M400
    SET_SERVO SERVO=dock ANGLE={euclid_probe.dock_servo_angle_engaged} WIDTH=0
    SET_SERVO SERVO=dock WIDTH=0
    # G4 P500
    M400
    #G4 P100

[gcode_macro _hide_dock]
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
    ; Move the dock out of the way
    # SET_SERVO SERVO=dock ANGLE={euclid_probe.dock_servo_angle_clear + 15}
    # G4 P50
    # M400
    # G4 P500
    SET_SERVO SERVO=dock ANGLE={euclid_probe.dock_servo_angle_clear}
    # G4 P500

    ; Disable servo's power
    G4 P250
    # M400
    SET_SERVO SERVO=dock ANGLE={euclid_probe.dock_servo_angle_clear} WIDTH=0
    SET_SERVO SERVO=dock WIDTH=0
    # G4 P500
    M400
    #G4 P100


#********* Euclid related macros *********
# M401 - Deploy Euclid Probe
[gcode_macro DEPLOY_PROBE]
gcode:
    _ASSERT_HOMED
    QUERY_PROBE
    {% if printer.probe.last_query %}
        _PROBE_DEPLOY
        ASSERT_PROBE_DEPLOYED
        # {action_raise_error("ERROR: ATTACH the probe manually!")}
    {% else %}
        M118 ?!Probe is already attached.
    {% endif %}

[gcode_macro _PROBE_DEPLOY]
description: deploy Euclid probe
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}

    {% if euclid_probe.batch_mode_enabled and euclid_probe.probe_state == "deployed" %}
        ASSERT_PROBE_DEPLOYED
        RESPOND TYPE=command MSG="Probe batch mode enabled: already deployed"
        _hide_dock
    G4 P50
    _hide_dock
    {% else %}
        RESPOND TYPE=command MSG="Fetching Euclid Probe."

        ; ensure the probe is currently stowed; can't deploy what isn't stowed.
        ASSERT_PROBE_STOWED

        G90

        ; set approach elevation to clear probe over bed on fixed gantry machine
        G0 Y{ euclid_probe.deploy_a[1] } F{ euclid_probe.move_speeds }
        G0 X{ euclid_probe.deploy_a[0] } Z{ euclid_probe.deploy_a[2] }

        ; Bring out the dock
        _bring_out_dock
        G4 P50
        _bring_out_dock

        ; move the carraige to safe position to start probe pickup
        G0 Z{ euclid_probe.deploy_b[2] }
        G0 X{ euclid_probe.deploy_b[0] } F10000; F{ euclid_probe.z_speeds }
        M400

        ; move up & out of the dock
        G0 Z{ euclid_probe.deploy_c[2] } F{ euclid_probe.z_speeds }

        ; Move the dock out of the way
        _hide_dock
        G4 P50
        _hide_dock

        ; Move to the left
        G0 X{ euclid_probe.deploy_d[0] } Z{ euclid_probe.deploy_d[2] } F{ euclid_probe.move_speeds }

        ; confirm deploy was successful
        ASSERT_PROBE_DEPLOYED

      {% endif %}

# M402 - Stow Euclid Probe
[gcode_macro STOW_PROBE]
gcode:
    _ASSERT_HOMED
    QUERY_PROBE
    {% if not printer.probe.last_query %}
        # M118 Docking Euclid Probe.
        {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}

        SAVE_GCODE_STATE NAME=STOW_PROBE
        SET_GCODE_OFFSET Z=0.0
        _PROBE_STOW
        RESTORE_GCODE_STATE NAME=STOW_PROBE

        {% if euclid_probe.batch_mode_enabled %}
            ASSERT_PROBE_DEPLOYED
        {% else %}
            ASSERT_PROBE_STOWED
        {% endif %}
    {% else %}
        M118 ?!Probe is already detached.
    {% endif %}


# M402 - Stow Euclid Probe
[gcode_macro _PROBE_STOW]
description: stow Euclid probe
gcode:
    _ASSERT_HOMED
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}

    {% if euclid_probe.batch_mode_enabled %}
        RESPOND TYPE=command MSG="Probe batch mode enabled: not stowing"
        SAVE_GCODE_STATE NAME=_PROBE_STOW
        G91
        G1 Z5.0
        G90
        RESTORE_GCODE_STATE NAME=_PROBE_STOW
        _hide_dock
        G4 P50
        _hide_dock
    {% else %}
        RESPOND TYPE=command MSG="Docking Euclid Probe."

        ; ensure the probe is currently deployed; can't stow what isn't deployed.
        ASSERT_PROBE_DEPLOYED
        _hide_dock
        G4 P50
        _hide_dock

        ; set approach elevation for fixed gantry system to clear probe over bed
        G0 X{ euclid_probe.stow_a[0] } Y{ euclid_probe.stow_a[1] } Z{ euclid_probe.stow_a[2] } F{ euclid_probe.move_speeds }

        ; Bring out the dock
        _bring_out_dock
        G4 P50
        _bring_out_dock

        ; move the carraige to safe position to start separation
        G0 X{ euclid_probe.stow_b[0] } Z{ euclid_probe.stow_b[2] }

        ; move down to slide the probe into keer
        G0 Z{ euclid_probe.stow_c[2] } F{ euclid_probe.z_speeds }
        ; change speed & slide into it deeper
        G0 Z{ euclid_probe.stow_d[2] } F{ euclid_probe.z_speeds * 3 / 4 }

        ; wait for moves to finish
        M400

        ; move to the left to separate the 2 pieces
        G0 X{ euclid_probe.stow_e[0] } F{ euclid_probe.move_speeds }

        ; confirm stowing was successful
        ASSERT_PROBE_STOWED

        ; Move the dock out of the way
        _hide_dock
        G4 P50
        _hide_dock

        ; Move to center of the bed
        ; G0 X117.5 Y117.5 Z20.0 F{ euclid_probe.move_speeds }
        ; M400

    {% endif %}

#.................................................................................................................
[gcode_macro _ASSERT_PROBE_STATE]
description: ensures probe is in a known state; QUERY_PROBE must have been called before this macro!
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
    ## QUERY_PROBE manually-verified results, when microswitch not depressed
    ## "TRIGGERED" -> 1 :: probe stowed
    ## "open"      -> 0 :: probe deployed
    # {action_respond_info("DEBUG: last_query: {}".format(printer.probe.last_query))}
    {% set last_query_state = "stowed" if printer.probe.last_query == 1 else "deployed" %}

    # {action_respond_info("DEBUG: euclid_probe.probe_state: {}, last_query_state: {}, params.MUST_BE: {}".format(euclid_probe.probe_state, last_query_state, params.MUST_BE))}
    {% if params.MUST_BE != last_query_state %}
        # M84 X Y E ;Disable all steppers but Z
        M82
        M106 S0 ;Turn-off fan
        TURN_OFF_HEATERS
        ; Move the dock out of the way
        #SET_SERVO SERVO=dock ANGLE={euclid_probe.dock_servo_angle_clear}
        #G4 P250
        #SET_SERVO SERVO=dock ANGLE={euclid_probe.dock_servo_angle_clear} WIDTH=0
        _hide_dock
        G4 P50
        _hide_dock
        { action_raise_error("expected probe state to be {} but is {} ({})".format(params.MUST_BE, last_query_state, printer.probe.last_query)) }
    {% else %}
        ## all good; update state
        SET_GCODE_VARIABLE MACRO=EuclidProbe VARIABLE=probe_state VALUE="'{ last_query_state }'"
    {% endif %}


[gcode_macro ASSERT_PROBE_DEPLOYED]
description: error if probe not deployed
gcode:
    # wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P250

    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=deployed


[gcode_macro ASSERT_PROBE_STOWED]
description: error if probe not stowed
gcode:
    # wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P250

    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=stowed

[gcode_macro SHAS]
gcode:
    {% set axes = printer.toolhead.homed_axes %}
    M117 {axes}
    RESPOND MSG="{ axes }"

[gcode_macro EUCLID_PROBE_BEGIN_BATCH]
description: begin euclid probe batch mode
gcode:
    SET_GCODE_VARIABLE MACRO=EuclidProbe VARIABLE=batch_mode_enabled VALUE=True
    RESPOND TYPE=command MSG="Probe batch mode enabled"

[gcode_macro EUCLID_PROBE_END_BATCH]
description: end euclid probe batch mode and stow probe
gcode:
    SET_GCODE_VARIABLE MACRO=EuclidProbe VARIABLE=batch_mode_enabled VALUE=False
    RESPOND TYPE=command MSG="Probe batch mode disabled"
    STOW_PROBE

[gcode_macro _debugged]
gcode:
    {% set ENABLE_DEBUG=0 %}
    {% if ENABLE_DEBUG == 1 %}
        {% set msg=params.MSG|default(printer.toolhead.homed_axes) %}
        # {% set output="{} --> {}".format(msg, printer.toolhead.homed_axes) %}
        {% set output="{}".format(msg) %}
        M400
        M118 {output}
        M118 ******************
    {% endif %}

[gcode_macro _calculate_bedcenter_probing_coords]
gcode:
    {% set config = printer.configfile.settings %}
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}  # this is the contents of line 144
    {% set pos_x = euclid_probe.probing_pos_x - config.probe.x_offset %}
    {% set pos_y = euclid_probe.probing_pos_y - config.probe.y_offset %}
    _debugged msg="{'_calculate macro=> adjusted pos_x: {}, pos_y: {}'.format(pos_x, pos_y)}"
    SET_GCODE_VARIABLE MACRO=EuclidProbe VARIABLE=adjusted_probing_pos_x VALUE={pos_x}
    SET_GCODE_VARIABLE MACRO=EuclidProbe VARIABLE=adjusted_probing_pos_y VALUE={pos_y}
    #EuclidProbe
    #M118 {"Before=> Adjusted probing coordinates: {}, {}".format(euclid_probe.adjusted_probing_pos_x, euclid_probe.adjusted_probing_pos_y)}
    #M118 {euclid_probe.adjusted_probing_pos_x}

    {% set euclid_probe2 = printer["gcode_macro EuclidProbe"] %}
    {% set apos_x = euclid_probe2.adjusted_probing_pos_x %}
    {% set apos_y = euclid_probe2.adjusted_probing_pos_y %}
    G4 S2
    #EuclidProbe
    #M118 {"After=> Adjusted probing coordinates: {}, {}".format(euclid_probe2.adjusted_probing_pos_x, euclid_probe2.adjusted_probing_pos_y)}
    #M118 {euclid_probe2.adjusted_probing_pos_x}
    #RESPOND TYPE=command MSG="{ printer['gcode_macro EuclidProbe'].adjusted_probing_pos_x }"

[gcode_macro PROBE_CALIBRATE]
description: Overwritten PROBE_CALIBRATE macro to deploy/stow Euclid probe.
rename_existing: PROBE_CALIBRATE_ORIG
gcode:
    {% set config = printer.configfile.settings %}
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}  # this is the contents of line 144
    {% set pos_x = euclid_probe.probing_pos_x - config.probe.x_offset %}
    {% set pos_y = euclid_probe.probing_pos_y - config.probe.y_offset %}
    _debugged msg="{'_calculate macro=> adjusted pos_x: {}, pos_y: {}'.format(pos_x, pos_y)}"

    DEPLOY_PROBE
    # G0 X{pos_x} Y{pos_y} F1200 # X110.459 Y99.335 F600
    _CLIENT_LINEAR_MOVE X={pos_x} Y={pos_y} F=1200 ABSOLUTE=1
    M400
    PROBE_CALIBRATE_ORIG
    #M118 {printer.gcode_move.gcode_position.z}
    STOW_PROBE
    #G0 X117.5 Y117.5 F600


[gcode_macro _Z_ENDSTOP_CALIBRATE]
description: Overwritten Z_ENDSTOP_CALIBRATE macro to deploy/stow Euclid probe.
# rename_existing: Z_ENDSTOP_CALIBRATE_ORIG
gcode:
    {% set config = printer.configfile.settings %}
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}  # this is the contents of line 144
    {% set pos_x = euclid_probe.probing_pos_x - config.probe.x_offset %}
    {% set pos_y = euclid_probe.probing_pos_y - config.probe.y_offset %}
    _debugged msg="{'_calculate macro=> adjusted pos_x: {}, pos_y: {}'.format(pos_x, pos_y)}"

    STABLE_Z_HOME
    DEPLOY_PROBE
    # G0 X{pos_x} Y{pos_y} F1200 # X110.459 Y99.335 F600
    _CLIENT_LINEAR_MOVE X={pos_x} Y={pos_y} F=1200 ABSOLUTE=1
    M400
    Z_ENDSTOP_CALIBRATE
    #M118 {printer.gcode_move.gcode_position.z}
    STOW_PROBE

[gcode_macro BED_MESH_CALIBRATE]
description: Overwritten BED_MESH_CALIBRATE macro to deploy/stow Euclid probe.
rename_existing: _BED_MESH_CALIBRATE
gcode:
    DEPLOY_PROBE
    {% if rawparams %}
        {% set escaped_params = rawparams.split(';', 1)[0].split('\x23', 1)[0] %}
        _debugged msg="{escaped_params}"
        _BED_MESH_CALIBRATE {escaped_params}
    {% else %}
        M118 "Runnig BED_MESH_CALIBRATE with no parameters!"
        _BED_MESH_CALIBRATE
    {% endif %}
    STOW_PROBE

#.................................................................................................................
[homing_override]
axes: z
set_position_z: -5
gcode:
    # _debugged MSG="STARTING"
    _calculate_bedcenter_probing_coords
    {% set do_z = False %}
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
    {% set szh = printer['gcode_macro _MY_STABLEZHOME_'] %}
    {% set config = printer.configfile.settings %}

    {% if "y" not in (printer.toolhead.homed_axes | lower) %}
        {% set y_homed = False %}
    {% else %}
        {% set y_homed = True %}
    {% endif %}

    {% if "x" not in (printer.toolhead.homed_axes | lower) %}
        {% set x_homed = False %}
    {% else %}
        {% set x_homed = True %}
    {% endif %}

    {% if "z" not in (printer.toolhead.homed_axes | lower) %}
        {% set z_homed = False %}
    {% else %}
        {% set z_homed = True %}
    {% endif %}

    # @TODO Remove this comment and the following once you've verified that the
    # @TODO probe can be deployed without the bed, dock, or toolhead colliding.
    # M112

    G90

    {% if szh.first_z_run or not szh.batch_mode_enabled %}
        SET_KINEMATIC_POSITION Z=0
        G0 Z{ euclid_probe.bed_clearance } F600
    {% endif %}

    {% if params.Z is defined %}
        # M118 "Z is defined"
        {% set do_z = True %}
    {% endif %}
    {% if params.Y is defined %}
        # M118 "Y is defined"
        {% set do_y = True %}
    {% endif %}
    {% if params.X is defined %}
        # M118 "X is defined"
        {% set do_x = True %}
    {% endif %}
    {% if params.X is not defined and params.Y is not defined and params.Z is not defined %}
        # M118 "Runnign full G28"
        {% set do_z = True %}
    {% endif %}
    #M118 {params}

    # home Y and X, Y first to avoid running into the dock
    {% if not y_homed or not x_homed %} # "y" not in (printer.toolhead.homed_axes | lower) %}
        _CLIENT_LINEAR_MOVE Z=2
        G28 Y
        G28 X
    {% endif %}

    # {% if "x" not in (printer.toolhead.homed_axes | lower) %}
    #    G28 X
    # {% endif %}

    {% if do_z %}
        ASSERT_PROBE_STOWED

        # force the bed and toolhead apart only if doing a plain homing or doing the first homing
        # run of the STABLE_Z_HOME
        {% if szh.first_z_run or not szh.batch_mode_enabled %}
            RESPOND MSG="Homing Z axis"
            # SET_KINEMATIC_POSITION Z=0
            # G0 Z{ euclid_probe.bed_clearance } F500
            # G0 X119 Y117.5 Z{ euclid_probe.position_za[2] } F{ euclid_probe.move_speeds } # center of bed and way above docking station
            G0 Z{ euclid_probe.position_za[2] } F{ euclid_probe.move_speeds }
            G0 X{ euclid_probe.position_za[0] - 30} # move to the right
            G0 X{ euclid_probe.position_za[0] } F500 # Slowly move to the right to the top of omron
            G91 # going relative since we haven't HOMEd Z yet
            G0 Z-5 F{ euclid_probe.move_speeds } # Move down to maybe displace magnets
            #G0 Z-3 F{ euclid_probe.move_speeds / 2 } # Move further down before activating the Omron switch, at ideal situation we should not lower more than 9.545
        {% endif %}
        G0 F{config.stepper_z.homing_speed*60}
        M400
        G90
        G28 Z # Let the firmware lower Z until switch is activated

        # get_z_pos0

        G91
        G0 Z{config.stepper_z.homing_retract_dist} F{config.stepper_z.homing_speed*60} # retract
        G90
        M400
        # G4 P250
        {% if szh.batch_mode_enabled %} # Don't go to center if we are running STABLE_Z_HOME command
            {% if szh.first_z_run %}
                SET_GCODE_VARIABLE MACRO=_MY_STABLEZHOME_ VARIABLE=first_z_run VALUE=False
            {% endif %}
            RESPOND TYPE=command MSG="stable_z_home mode enabled: staying above Z endstop!"
        {% else %}
            # Move away from docking area
            # G0 Z{ euclid_probe.position_zc[2] } # step back from C to A
            # G0 Z{ euclid_probe.position_zb[2] } F{ euclid_probe.move_speeds }
            G0 Z{ euclid_probe.position_za[2] } F{ euclid_probe.move_speeds }
            # G0 X117.5 Y117.5 Z{ euclid_probe.position_za[2]} F{ euclid_probe.move_speeds }
        {% endif %}
    {% endif %}
    G1 F6000

    #{% if "x" in (printer.toolhead.homed_axes | lower) and "y" in (printer.toolhead.homed_axes | lower) and "z" in (printer.toolhead.homed_axes | lower) %}
    #    STOW_PROBE
    #    ASSERT_PROBE_STOWED
    #{% endif %}

    M400
    # G4 P250
