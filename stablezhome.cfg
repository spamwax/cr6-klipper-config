[gcode_macro _MY_STABLEZHOME_]
variable_batch_mode_enabled: False
variable_first_z_run: True

gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro _MY_STABLEZHOME_'] }"

[gcode_macro STABLEZHOME_BEGIN_BATCH]
description: begin z homing batch mode for stable_z_home command
gcode:
    SET_GCODE_VARIABLE MACRO=_MY_STABLEZHOME_ VARIABLE=batch_mode_enabled VALUE=True
    SET_GCODE_VARIABLE MACRO=_MY_STABLEZHOME_ VARIABLE=first_z_run VALUE=True
    RESPOND TYPE=command MSG="STABLEZHOME batch mode enabled"

[gcode_macro STABLEZHOME_END_BATCH]
description: end z homing batch mode for stable_z_home command
gcode:
    SET_GCODE_VARIABLE MACRO=_MY_STABLEZHOME_ VARIABLE=batch_mode_enabled VALUE=False
    SET_GCODE_VARIABLE MACRO=_MY_STABLEZHOME_ VARIABLE=first_z_run VALUE=True
    RESPOND TYPE=command MSG="STABLEZHOME batch mode disabled"

[gcode_macro STABLE_Z_HOME]
rename_existing: STABLE_Z_HOME_BASE
description: Z-END-STOP Adjusted - Repeatedly home Z until the Z stepper position stabilizes
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
    {% set config = printer.configfile.settings %}

    STABLEZHOME_BEGIN_BATCH

    STABLE_Z_HOME_BASE
    SAVE_GCODE_STATE NAME=_MY_STABLEZHOME_UP
    G91
    G1 Z{config.stepper_z.homing_retract_dist} F1200
    # G1 X-117.5 F{ euclid_probe.move_speeds }
    RESTORE_GCODE_STATE NAME=_MY_STABLEZHOME_UP

    STABLEZHOME_END_BATCH

[gcode_macro get_z_pos0]
gcode:
    {% set pos = printer.toolhead.position %}
    RESPOND TYPE=command MSG="--> { pos } <--"

    
[gcode_macro get_z_pos]
gcode:
    {% set toolhead = printer.toolhead %}
    RESPOND TYPE=command MSG="--> { printer.toolhead } <--"
    M118 {toolhead}
    {% set kin = toolhead.kinematics %}
    {% set steppers = kin.steppers %}

    {% for s in steppers if s.get_name().startswith('stepper_z') %}
        {% set stepper = s %}
    {% endfor %}
    {% set stepper = steppers.name|select("startswith", "stepper_z")|first %}
    {% set mcu_position_offset = -stepper.mcu_to_commanded_position(0) %}
    {% set mcu_pos = stepper.get_commanded_position() + mcu_position_offset %}

    {% set output = "mcu_pos: {}\n stepper: {}".format(mcu_pos, stepper) %}
    M118 {output}

