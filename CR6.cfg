# Creality CR-6 SE specific configuration
# The START_PRINT and END_PRINT macro's are called in the slicer start code
# Slicer start code:	start_print HOTEND_TEMP={material_print_temperature_layer_0} BED_TEMP={material_bed_temperature_layer_0}
# Slicer end code:		end_print
# The end_print sets the part fan to maximum to speed up cooling of the hotend and waits for the hotend and bed to cool below 50 °C.
# The end print macro can switch off the printer, this part is commented out as the RPI_MCU needs to be implemneted first.


# Probing on the screw locations
[bed_mesh]
speed: 110
horizontal_move_z: 20.2
mesh_min: 42, 2 # 23, 22 # 8, 20 # 20, 5
# this is coordinate of the probe, not the nozzle. since we have a z-endstop and euclid we cannot move nozzle beyond 202, which gives us,
# max probe location of 202+42.5=244.6. However at this point euclid will be off the bed, hence we are using 231!
mesh_max: 231, 228 # 214.5, 221.5 # 230, 220 # 235, 224
probe_count: 6 # 25
mesh_pps: 1
algorithm: bicubic
#zero_reference_position: 117.5, 117.5
#bicubic_tension: 0.21
#fade_start: 1.4
#fade_end: 11.0
#fade_target: 0

[bed_screws]
screw1: 27.5, 27 # 23, 22
screw1_name: front left screw
screw2: 217, 28 # 213.5, 21.5
screw2_name: front right screw
screw3: 25, 225.5 # 24, 221.5
screw3_name: rear left screw
screw4: 214.5, 228 # 214.5, 221.5
screw4_name: rear right screw

[screws_tilt_adjust]
screw1: -1, 34 # 16, 3.8
screw1_name: front left screw
screw2: 175.5, 35 # 206.5, 3.3
screw2_name: front right screw
screw4: -1, 232.5 # 17, 203.3
screw4_name: rear left screw
screw3: 173, 235 # 207.5, 203.3
screw3_name: rear right screw
horizontal_move_z: 10.
speed: 50.
screw_thread: CW-M4

# [safe_z_home]
# home_xy_position: 110.459, 99.335
# speed: 50
# z_hop: 10
# z_hop_speed: 4

[force_move]
enable_force_move: True

[exclude_object]

[skew_correction]

[gcode_macro ABL]
gcode:
    {% if params.PROFILE is defined %}
        G28 X Y
        {% set bedTemp = params.TEMP|default(65.0)|float %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedTemp}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0 ; Switch off hotend
        M106 S0 ; Switch off part cooling fan
        # Wait for bed to heat up
        RESPOND MSG='{"Waiting for bed to heat up to %.1f" % bedTemp}'
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedTemp - 1}
        STABLE_Z_HOME
		{% set pname = params.PROFILE %}
        RESPOND MSG='{"Starting bed probing (%s)" % pname}'
        BED_MESH_CALIBRATE PROFILE={pname}
        BED_MESH_PROFILE SAVE={pname}
        RESPOND MSG='{"Finished ABL: %s " % pname}'
    	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
        # SAVE_CONFIG
    {% else %}
        RESPOND MSG="Provide a profile name!"
    {% endif %}

[stable_z_home]
#gcode:
#  The G-code to run before each probe attempt. The default is none.
#retries:
#  The maximum number of probe attempts allowed. The default is 20.
#window:
#  The number of samples to use in the tolerance window. The default is 4.
retry_tolerance: 0.005
#  The maximum range between the min and max values of the Z offset in the window
#  to consider the offset stable and complete the procedure. The default is
#  0.0025mm.

# From https://github.com/SoftFever/OrcaSlicer/issues/4220
# To calibrate Square Corner Velocity, add the following to
# 'Layer Change GCODE':
# SET_SQV MULTIPLIER=0.2 LAYER=[layer_num]
[gcode_macro SET_SQV]
gcode:
  {% set multiplier = params.MULTIPLIER|default(0.01)|float %}
  {% set layer = params.LAYER|default(1)|float %}
  {% set sqv = multiplier * layer %}
  {% if layer <= 1 %}
    {% set sqv = 2 %}
  {% endif %}
  RESPOND TYPE=echo MSG='{"set sqv: multi: %f, layer: %f, final sqv: %f" % (multiplier, layer, sqv) }'
  SET_DISPLAY_TEXT MSG='{"S%.1f M%.2f L%.0f " % (sqv, multiplier, layer) }'
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro MY_TIMELAPSE_TAKE_FRAME]
variable_timelapse: False
description: take a timelapse frame if the START_PRINT received a parameter to instruct it to do so.
gcode:
    {% set timelapse = printer["gcode_macro MY_TIMELAPSE_TAKE_FRAME"].timelapse %}
    {% if timelapse %}
    # {action_respond_info("Taking frame! {}".format(timelapse))}
    # Use moonraker's builtin macro to take the actual frame.
        TIMELAPSE_TAKE_FRAME
    # {% else %}
    # {action_respond_info("NOT Taking frame! {}".format(timelapse))}
    {% endif %}

[gcode_macro START_PRINT]
variable_timelapse: False
gcode:
    {% if params.HOTEND_TEMP is not defined or params.BED_TEMP is not defined %}
      {action_raise_error("Printing temperatures are not defined!")}
    {% endif %}

    {% set toolTemp = params.HOTEND_TEMP|int %}
    {% set bedTemp = params.BED_TEMP|int %}
    {% set zadjust = params.Z_ADJUST|default(0.0)|float %}
    {% set timelapse = params.TIMELAPSE|default(0)|int != 0 %}
    # Inform MY_TIMELAPSE_TAKE_FRAME macro whether or not it should take the frame
    SET_GCODE_VARIABLE MACRO=MY_TIMELAPSE_TAKE_FRAME VARIABLE=timelapse VALUE={timelapse}

    # Turn on tool head light if not creating a timelapse video
    {% if not timelapse %}
      TURN_ON_LED
      {action_respond_info("❗Will NOT generate a timelapse video.")}
    {% else %}
      TURN_OFF_LED
      {action_respond_info("❕Will render a timelapse video at the end of the print.")}
    {% endif %}

    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=filament_motion_sensor ENABLE=1
    M106 S0 # Turn off part cooling fans

    # Turn stuff back on
    # RESPOND MSG="Turning shit back on!"

    ; Always do this this after CALIBRATE_Z
    SET_GCODE_OFFSET Z_ADJUST={zadjust} MOVE=1
    Z_OFFSET_APPLY_ENDSTOP

    # Use bed mesh that covers the purge line area
    BED_MESH_PROFILE LOAD=default_65deg
    #move to the side, wait untill the bed is within 10 deg from target heat the hotend
    G90
    G0 Z30 F1000
    G0 X0 Y0 F6000
    M117 Drooling...
    RESPOND MSG="Drooling..."
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={toolTemp}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedTemp}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedTemp - 0.5}
    TEMPERATURE_WAIT SENSOR=extruder   MINIMUM={toolTemp - 1}	#start printing 1 deg before reaching setpoint
    M117 Purging Extruder

    # And we can now draw our purge line
    {% set x0 = 3.0 %}
    {% set y0 = 20.0 %}
    {% set x1 = x0 + 0.5 %}
    {% set y1 = 200.0 %}
    G92 E0 								#Reset Extruder
    G1 Z2.0 F1500.0 					#Move Z Axis up
    G1 X{x0} Y{y0} Z0.28				#Move to start position
    G1 X{x0} Y{y1} Z0.28 E15   			#Draw the first line
    G1 X{x1} Y{y1} Z0.28 				#Move to side a little
    G1 X{x1} Y{y0} Z0.28 E30 			#Draw the second line
    M83
    G1 E-1.4 F1800 ; retract
    G1 Z2.0 F3000 						#Move Z Axis up
    G1 E1.0 F1800 ;  ; unretract
    G92 E0 								#Reset Extruder
    # Restore adaptive mesh
    BED_MESH_PROFILE LOAD="live-adaptive"

    # Set SKEW
    # SET_SKEW XY=140.96,141.10,99.7
    # SET_SKEW XY=141.476,141.367,99.983 XZ=141.523,141.32,99.983 YZ=141.516,141.327,100.006
    SKEW_PROFILE LOAD=calilantern_skew_profile

    G1 F6000
    M117 Printing...

[gcode_macro END_PRINT]
# Put the following in the Cura end code and remove everything else:
# end_print
gcode:
    TURN_OFF_HEATERS
    M106 S255 ;full fan
	G91 ;Relative positioning
	G1 E-1.5 F3000 ;Retract a bit
	G1 E-0.5 Z0.2 F2400 ;Retract and raise Z
	G1 X5 Y5 F5000 ;Wipe out
	# G1 Z10 ;Raise Z more

    # {% set act_z = printer.toolhead.position.z|float %}
    # Clear SKEW
    SET_SKEW CLEAR=1
    G90 ;Absolute positioning
    {% if params.ENDZ is defined %}
        {action_respond_info("ENDZ is {}".format(params.ENDZ))}
        G90 ;Absolute positioning
        # G1 Z{params.ENDZ} F600
        G1 X0 Y235 Z{params.ENDZ} F6000
    {% else %}
        {action_respond_info("ENDZ is not defined")}
        G91 ; Slicer didn't set "Present print" Z since max_layer_z==max_print_height
        ; Move up step by small steps just in case we are too close to max_print_height
        G1 Z0.5
        G1 Z1.0
        G1 Z1.0
        G1 Z1.0
        G1 Z1.0
        G90
        G1 X0 Y235 F6000
    {% endif %}
    # G90 ;Absolute positioning
    # G1 X0 Y225 F6000 ;Present print




	G91 ;Relative positioning
    BED_MESH_CLEAR
	G4 S30
	G1 E-0.5 F2700 ; retract a bit more after cooling for 30 seconds about 20 degrees
	G4 S30
	G1 E-0.5 F2700 ; retract a bit more after cooling for 30 seconds about 20 degrees
	G90 ;Absolute positioning
	M84 X Y E ;Disable all steppers but Z
	M82 ;absolute extrusion mode

	# TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=60
    # M107 ; turn off fan
    TURN_OFF_LED
	# M106 S0 ;Turn-off fan



[gcode_macro POWER_OFF_PRINTER]
description: Kickstarts the power-off process if temperatures are safe or if FORCE parameter is provided
# params.DELAY is in minutes
gcode:
    {% set forced = params.FORCE|default(0)|int %}
    {% set temp = params.MAX_TEMP|default(60)|int %}
    SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=temp VALUE={temp}
    SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=extruder_safe VALUE=0
    M118 Powering off the printer...
    {% if forced != 0 %}
        {% if printer.extruder.target >= temp+1 or printer.extruder.temperature >= temp+1 or printer.heater_bed.temperature >= 67 %}
            {action_respond_info("Extruder/Bed temp are above safe values for a shutdown!")}
            {action_respond_info("💀💀 WARNING 💀💀")}
        {% endif %}
        {action_respond_info("FORCED shutdown is requested!")}
        SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=do_it VALUE=1
        SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=extruder_safe VALUE=1
        SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=timer_expired VALUE=1
        UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=1.0
        M118 System will shutdown now...
    {% else %}
        {% if params.DELAY is defined %}
            {% set max_delay_time = params.DELAY|int %}
            SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=delay VALUE={max_delay_time}
            SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=timer_expired VALUE=0
            {action_respond_info("Powering off in {} minutes!".format(max_delay_time))}
            # UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=0.1
        {% else %}
            {% if printer.extruder.target >= temp+1 or printer.extruder.temperature >= temp+1 or printer.heater_bed.temperature >= 67 %}
                {action_respond_info("Refusing to shundown immediately!")}
                M118 Use "POWER_OFF_PRINTER FORCE=1" to force a shutdown.
                {action_respond_info("Waiting for Extruder/Bed temp to become safe: {}C".format(temp))}
            {% else %}
                # {action_respond_info("POWER_OFF_PRINTER setting do_it variable to 1")}
                SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=do_it VALUE=1
                SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=extruder_safe VALUE=1
                SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=timer_expired VALUE=1
                M118 System will shutdown within 5.0 secs.
                M106 S0 ; Turn off fans.
            {% endif %}
        {% endif %}
    {% endif %}
    UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=0.1

[delayed_gcode delayed_printer_off]
initial_duration: 5.0
gcode:
    {% set do_it = printer["gcode_macro DO_POWER_OFF"].do_it|int %}
    {% set temp  = printer["gcode_macro DO_POWER_OFF"].temp |int %}
    {% set delay = printer["gcode_macro DO_POWER_OFF"].delay|int %}
    {% set extruder_safe = printer["gcode_macro DO_POWER_OFF"].extruder_safe|int %}
    {% set timer_expired = printer["gcode_macro DO_POWER_OFF"].timer_expired|int %}
    #{action_respond_info("do_it: {}, temp: {}, delay: {}, extruder_safe: {}, timer_expired: {}".format(do_it, temp, delay, extruder_safe, timer_expired))}
    {% if (extruder_safe > 0 and timer_expired > 0) or do_it == 1 %}
        SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=do_it VALUE=1
        DO_POWER_OFF
    {% endif %}
    {% if do_it == 1 %}
        # {action_respond_info("Simple TURN OFF")}
        DO_POWER_OFF
    {% else %}
        {% if temp > 0 %}
            # {action_respond_info("TEMP TURN OFF: {}".format(temp))}
            _WAIT_FOR_EXTRUDER_TEMP TEMP={temp}
        {% endif %}
        {% if delay > 0 %}
            # {action_respond_info("DELAY TURN OFF".format(delay))}
            TIME_POWER_OFF DELAY={delay}
        {% endif %}
        UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=5.0
    {% endif %}

[gcode_macro TIME_POWER_OFF]
variable_counter: 0
variable_warned: 0
gcode:
    {% set c = printer["gcode_macro TIME_POWER_OFF"].counter|int %}
    {% set delay = params.DELAY|int %}
    {% set extruder_safe = printer["gcode_macro DO_POWER_OFF"].extruder_safe|int %}
    {% set warned = printer["gcode_macro TIME_POWER_OFF"].warned|int %}
    {% set elapsed = c * 5 %}
    # {action_respond_info("c was {}, delay is {}".format(c, delay))}
    {% if elapsed > delay * 60 %}
        {% if extruder_safe == 0 %}
            {% if warned == 0 %}
                {action_respond_info("extruder temp is not safe yet! ({}C > {}C).".format(printer.extruder.temperature, printer["gcode_macro DO_POWER_OFF"].temp))}
                {action_respond_info("Waiting longer than {} minutes for it to cool off".format(delay))}
                {action_respond_info("{:.2f} minutes passed so far!".format(elapsed/60.0))}
                SET_GCODE_VARIABLE MACRO=TIME_POWER_OFF VARIABLE=warned VALUE=1
            {% endif %}
            TURN_OFF_HEATERS
        {% else %}
            {action_respond_info("{:.2f} minutes passed, Requesting timer-based power off!".format(elapsed/60.0))}
        {% endif %}
        {% set c = c + 1 %}
        SET_GCODE_VARIABLE MACRO=TIME_POWER_OFF VARIABLE=counter VALUE={c}
        SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=timer_expired VALUE=1
    {% else %}
        # {action_respond_info("{} seconds passed!".format(elapsed))}
        {% set c = c + 1 %}
        SET_GCODE_VARIABLE MACRO=TIME_POWER_OFF VARIABLE=counter VALUE={c}
    {% endif %}
    # {action_respond_info("c IS {}".format(c))}

[gcode_macro _WAIT_FOR_EXTRUDER_TEMP]
description: Marks extruder to be safe for power off if it is cooler than TEMP
gcode:
    {% if params.TEMP is defined %}
        {% set timer_expired = printer["gcode_macro DO_POWER_OFF"].timer_expired|int %}
        {% set target_temp = params.TEMP|int %}
        # {% set target_temp = printer["gcode_macro DO_POWER_OFF"].temp|int %}
        {% if printer.extruder.temperature < target_temp %}
            SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=extruder_safe VALUE=1
            {% if timer_expired > 0 %}
                {action_respond_info("extruder is cool enough to power off the printer!")}
            {% endif %}
            M107 ; turn off fan
        {% endif %}
    {% endif %}

[gcode_macro DO_POWER_OFF]
description: Sends the off signal to device power if OFF parameter is provided or if POWER_OFF_PRINTER is called.
variable_do_it: 0
variable_temp: 0
variable_extruder_safe: 0
variable_delay: 0
variable_timer_expired: 1
gcode:
    {% set do_it = printer["gcode_macro DO_POWER_OFF"].do_it|int %}
    {% set off = params.OFF|default("--") %}
    {% if params.OFF is defined %}
        M118 OFF is provided, 💀💀 Shutting down NOW! 💀💀
        {action_call_remote_method("set_device_power", device="printer", state="off")}
    {% endif %}
    {% if do_it == 1 %}
        M118 💀 Shutting down! 💀
        {action_call_remote_method("set_device_power", device="printer", state="off")}
        SET_GCODE_VARIABLE MACRO=DO_POWER_OFF VARIABLE=do_it VALUE=1
    {% endif %}

[gcode_macro TIMELAPSE_TAKE_FRAME]
gcode:
	{action_call_remote_method("timelapse_newframe")}

[gcode_macro TIMELAPSE_RENDER]
gcode:
	{action_call_remote_method("timelapse_render")}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% if params.TEMP is defined %}
        {% set tempNozzle = params.TEMP|float %}
    	{% set act_z = printer.toolhead.position.z|float %}
        #{% if act_z < 70.0 %}
            SAVE_GCODE_STATE NAME=LOAD_FILAMENT
            G91
            G1 Z5
            G90
            G0 X117.5 Y117.5 Z140
            RESTORE_GCODE_STATE NAME=LOAD_FILAMENT
        #{% endif %}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={tempNozzle}
        {action_respond_info("Waiting for nozzle temperature to stabilize!")}
    	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={tempNozzle - 0.5}
        M118 Extruding for 45mm at F120
        M83                            ; set extruder to relative
        G1 E45 F120 ;F300                    ; load filament set for direct drive, for bowden set to E280
        M118 Extruding for 30mm at F80
        G1 E30 F80 ;F200                    ; slower extrusion for hotend path
        #G1 E45 F150                    ; prime nozzle with filament
    	#TURN_OFF_HEATERS
    	G1 E-0.5 F500						; retract a bit
    	G1 E-1 F5						; retract a bit
        M82                            ; set extruder to absolute
        TURN_OFF_HEATERS
        M118 🌳 Done 🌳
    {% else %}
        {action_respond_info("Specify a nozzle TEMPerature for loading the filament!")}
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% if params.TEMP is defined %}
        {% set tempNozzle = params.TEMP|float %}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={tempNozzle}
        {action_respond_info("Waiting for nozzle temperature to stabilize!")}
    	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={tempNozzle - 0.5}
        M118 Starting unloading...
    	; {% set act_z = printer.toolhead.position.z|float %}
        ; {% if act_z < 30.0 %}
        ;    G91
    	;	G1 Z30
        ; {% endif %}
        M83                            ; set extruder to relative
        G1 E15 F150                     ; extrude a little to soften tip
        G1 E-100 F600                 ; retract filament completely, set to E380 for Bowden
        M400
        M82                            ; set extruder to absolute
        TURN_OFF_HEATERS
        M118 🌳 Done 🌳
    {% else %}
        {action_respond_info("Specify a nozzle TEMPerature for unloading the filament!")}
    {% endif %}


[gcode_macro Hotend_Cleaning]
gcode:
    M83                            ; set extruder to relative
    G1 E45 F1000                   ; quickly load filament set for direct drive, for bowden set to E280
    G1 E30 F300                    ; slower extrusion for hotend path
    G1 E50 F150                    ; prime nozzle with filament
    G1 E-100 F1000                 ; retract filament completely, set to E380 for Bowden
    M82                            ; set extruder to absolute

[gcode_macro M204]
rename_existing: M204.1
gcode:
	{% if params.S is defined %}
		{% set s = params.S|float %}
		SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={s/2}
	{% endif %}

[gcode_macro M900]
gcode:
	{% if params.K is defined %}
		{% set K = params.K|float %}
		SET_PRESSURE_ADVANCE ADVANCE={K}
    {% else %}
        {action_respond_info("Setting PA to 0.0")}
        SET_PRESSURE_ADVANCE ADVANCE=0.0
	{% endif %}

[gcode_macro noise]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
    G91
    G1 Z5.0
    G90
    G1 X100 Y100 F7200
    G1 X115 Y115 F7200
    G1 X100 Y100 F7200
    G1 X105 F7200
    G1 X105 Y105 F7200
    G1 X120 Y120 F7200
    G1 X105 Y105 F7200
    G1 X120 Y120 F7200
    G1 X105 Y105 F7200
    G1 X120 Y120 F7200
    G1 X105 Y105 F7200
    G1 X5
    G91
    {% for i in range (100) %}
    G1 X2 F7200
    G1 X15 Y15 F7200
    G1 X-15 Y-15 F7200
    {% endfor %}

[gcode_macro mgn_breakin]
gcode:
    {% set speed_upper = 6000 %}
    {% set speed_lower = 2100 %}

    {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

    G90
    G1 X117.5 Y117.5 Z150 F2100
    {% for i in range(100) %}

        {% set rspeed = range(speed_lower, speed_upper) | random | int %}
        {% set yrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set xrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set m = "Iteration {} starts with F{} and Y{}".format(i+1, rspeed, yrand) %}
        M117 {m}
        G1 X{xrand} Y{yrand} F{rspeed}

        {% set rspeed = range(speed_lower, speed_upper) | random | int %}
        {% set yrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set xrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        G1 X{xrand} Y{yrand} F{rspeed}
        {% set rspeed = range(speed_lower, speed_upper) | random | int %}
        {% set yrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set xrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        G1 X{xrand} Y{yrand} F{rspeed}
        {% set rspeed = range(speed_lower, speed_upper) | random | int %}
        {% set yrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set xrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        G1 X{xrand} Y{yrand} F{rspeed}
        {% set rspeed = range(speed_lower, speed_upper) | random | int %}
        {% set yrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set xrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        G1 X{xrand} Y{yrand} F{rspeed}
        {% set rspeed = range(speed_lower, speed_upper) | random | int %}
        {% set yrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set xrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        G1 X{xrand} Y{yrand} F{rspeed}

        G1 X1 Y1 F{speed_upper}

        {% set rspeed = range(speed_lower, speed_upper) | random | int %}
        {% set yrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set xrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        G1 X{xrand} Y{yrand} F{rspeed}
        {% set rspeed = range(speed_lower, speed_upper) | random | int %}
        {% set yrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set xrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        G1 X{xrand} Y{yrand} F{rspeed}
        {% set rspeed = range(speed_lower, speed_upper) | random | int %}
        {% set yrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set xrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        G1 X{xrand} Y{yrand} F{rspeed}
        {% set rspeed = range(speed_lower, speed_upper) | random | int %}
        {% set yrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set xrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        G1 X{xrand} Y{yrand} F{rspeed}

        {% set rspeed = range(speed_lower, speed_upper) | random | int %}
        {% set yrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set xrand =  (range(1, 230) | random) + ((range(1, 99) | random) / 100) %}
        {% set m = "X, Y coordinate: {}".format(xrand, yrand) %}
        M117 {m}
        G1 X{xrand} Y{yrand} F{rspeed}

        G1 X230 Y230 F{speed_upper}

    {% endfor %}

[gcode_macro ORCA_BED_MESH_CALIBRATE]
# rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% if rawparams %}
        {% set escaped_params = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
        {action_respond_info("escaped_params: {}".format(escaped_params))}
        EUCLID_PROBE_BEGIN_BATCH
        DEPLOY_PROBE
        BED_MESH_CALIBRATE {escaped_params}
    {% else %}
        {action_respond_info("No parameters was specified for BED_MESH_CALIBRATE!")}
    {% endif %}




[gcode_macro _START_PRINT_OLD]
# put the following in the Cura start code and remove everything else:
# start_print HOTEND_TEMP={material_print_temperature_layer_0} BED_TEMP={material_bed_temperature_layer_0}
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	{% set toolTemp = params.HOTEND_TEMP|int %}
	{% set bedTemp = params.BED_TEMP|int %}
    {% set toolTemp_homing = 150 %}
    {% set zadjust = params.Z_ADJUST|default(0.0)|float %}
    {% set do_bedMesh = params.ADAPTIVE_MESH|default(0)|int %}

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={toolTemp_homing}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedTemp}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedTemp - 1}	# wait for bed to be over 50
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={toolTemp_homing}

    ; M82 								# absolute extrusion mode
	M220 S100 							# Reset Feedrate
	M221 S100 							# Reset Flowrate
    #home all axis and leave printhead in center of the bed for quick Z homing once the bed is 15 degrees below its target

    G28 X Y

    # Try to reduce noise signals by turning off shit & stuff so that the precious, delicate BLTouch works!!!
    RESPOND MSG="Turning shit off for probing!"
    # SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0 ; Turn off hot end
    M106 S0 ;Turn-off part cooling fan
    G4 P2000 ; Wait a bit

    STABLE_Z_HOME  # instead of G28 Z

    EUCLID_PROBE_BEGIN_BATCH

    CALIBRATE_Z

    # Always do this this after CALIBRATE_Z
    SET_GCODE_OFFSET Z_ADJUST={zadjust} MOVE=1
    Z_OFFSET_APPLY_ENDSTOP

    ############################## LOAD BED MESH PROFILE #####################################
    #BED_MESH_CLEAR
    #BED_MESH_PROFILE LOAD="z-offset-calibration-pattern"
    #BED_MESH_CALIBRATE PROFILE="live-adaptive"
    ##########################################################################################


    EUCLID_PROBE_END_BATCH
    ASSERT_PROBE_STOWED

    # Turn stuff back on
    RESPOND MSG="Turning shit back on!"

	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={toolTemp_homing}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedTemp}

	#move to the side, wait untill the bed is within 10 deg from target heat the hotend
	G90
	G0 Z30 F1000
	G0 X0 Y0 F1500
    M117 Drooling...
    RESPOND MSG="Drooling..."
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={toolTemp}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedTemp}
    TEMPERATURE_WAIT SENSOR=extruder   MINIMUM={toolTemp - 1}	#start printing 1 deg before reaching setpoint
	M117 Purging Extruder
	# And we can now draw our purge line
    {% set x0 = 1.0 %}
    {% set y0 = 20.0 %}
    {% set x1 = x0 + 0.5 %}
    {% set y1 = 200.0 %}
	G92 E0 								#Reset Extruder
	G1 Z2.0 F1500.0 					#Move Z Axis up
	G1 X{x0} Y{y0} Z0.28				#Move to start position
	G1 X{x0} Y{y1} Z0.28 E15   			#Draw the first line
	G1 X{x1} Y{y1} Z0.28 				#Move to side a little
	G1 X{x1} Y{y0} Z0.28 E30 			#Draw the second line
	G92 E0 								#Reset Extruder
    ; wipe_on_bed
    G92 E0
	G1 Z5.0 F3000 						#Move Z Axis up

    #BED_MESH_PROFILE   LOAD="live-adaptive"

    # Set SKEW
    SET_SKEW XY=140.96,141.10,99.7

    G1 F6000
    M117 Printing...

# [gcode_macro TARE_PROBE]
# gcode:
# 	M104 S0
# 	SET_PIN PIN=probe_tare VALUE=0
# 	G4 P250
# 	SET_PIN PIN=probe_tare VALUE=1
# 	G4 P250
# 	{action_respond_info("Probe tared")}

[gcode_macro test_velocity]
gcode:
    {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
    {action_respond_info("pause_resume.recover_velocity: {}".format(velocity))}
    M118 💀💀💀💀💀 Hi

[stable_z_home]
gcode:
#  The G-code to run before each probe attempt. The default is none.
#retries:
#  The maximum number of probe attempts allowed. The default is 20.
#window:
#  The number of samples to use in the tolerance window. The default is 4.
#retry_tolerance:
#  The maximum range between the min and max values of the Z offset in the window
#  to consider the offset stable and complete the procedure. The default is
#  0.0025mm.

[gcode_macro wipe_on_bed]
gcode:
    G92 E0
    G1 X4.0 Y10 Z0.28 F1500.0      ;Slightly move off of end of last line
    ;G1 X0.5 Y10 Z0.28 F1500.0

    G1 Z0.1 F2000                  ;Move Z to wiping height
    G1 Z0.02 F60                   ;Move Z to wiping height
    ;G1 E-1.5 F1500                ;Retract

    G1 X10.0 Y10 Z0.02 F1000.0     ;-> Move back & forth and up & down
    G1 X5.0 Y10 Z0.02 F1000.0      ;<-
    ;G1 X5.0 Y10 Z0.02 F1000.0     ;To bed level
    G1 X10.0 Y10 Z0.02 F1000.0     ;->
    G1 X5.0 Y10 Z0.02 F1000.0      ;<-
    G1 X10.0 Z0.1 E-0.3 F3000.0      ;->
    ;G1 E1 F1500
    G1 Y10 Z2.00 F1000.0           ;^


# Use this to print https://www.klipper3d.org/prints/square_tower.stl
# Use a high speed (eg, 100mm/s), zero infill, and a coarse layer height
# (the layer height should be around 75% of the nozzle diameter, 0.3 for a 0.4 nozzle).
# Make sure any "dynamic acceleration control" is disabled in the slicer.
[gcode_macro start_print_linear_pressure]
gcode:
	{% set toolTemp = params.HOTEND_TEMP|int %}
	{% set bedTemp = params.BED_TEMP|int %}
	;SET_GCODE_OFFSET Z=0
	{% if toolTemp >= 221 %}
		SET_GCODE_OFFSET Z=0.03
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedTemp}
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
	M82 								# absolute extrusion mode
	M220 S100 							# Reset Feedrate
	M221 S100 							# Reset Flowrate

	#home all axis and leave printhead in center of the bed for quick Z homing once the bed is 15 degrees below its target
	G28
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedTemp -15}	# wait for bed to be over 50
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=140
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
	G28	Z							# home all axes

	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={toolTemp -70}

    # Special settings for pressure advance calibration
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    # For direct drive
    # TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005
    # For long bowden extruders
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020


    ############################## LOAD BED MESH PROFILE #####################################
    ;BED_MESH_PROFILE LOAD="try3"
    ##########################################################################################


	#move to the side, wait untill the bed is within 10 deg from target heat the hotend
	G90
	G0 Z20
	G0 X0 Y0
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedTemp - 10}
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={toolTemp}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={toolTemp - 1}	#start printing 1 deg before reaching setpoint

	# And we can now draw our purge line
	G92 E0 								#Reset Extruder
	G1 Z2.0 F3000 						#Move Z Axis up
	G1 X0 Y20 Z0.28						#Move to start position
	G1 X0 Y200.0 Z0.28 E15   			#Draw the first line
	G1 X0 Y200.0 Z0.28 					#Move to side a little
	G1 X0.5 Y20 Z0.28 E30 				#Draw the second line
	G92 E0 								#Reset Extruder

    wipe_on_bed
    G92 E0
	G1 Z2.0 F3000 						#Move Z Axis up
